using System;
using System.Collections.Generic;

namespace _16._02_2
{

    class SimpleLongNumbers
    {
        public long Value;

        public SimpleLongNumbers(long value) { Value = value; }

        public static SimpleLongNumbers operator +(SimpleLongNumbers a, SimpleLongNumbers b)
        {
            return new SimpleLongNumbers(a.Value + b.Value);
        }

        public static SimpleLongNumbers operator -(SimpleLongNumbers a, SimpleLongNumbers b)
        {
            if (a.Value >= b.Value)
                return new SimpleLongNumbers(a.Value - b.Value);
            else
            {
                throw new Exception("NotNaturalNumberException");
            }
        }

        public static int operator <(SimpleLongNumbers a, SimpleLongNumbers b)
        {
            if (a.Value < b.Value)
                return 1;
            else if (a.Value > b.Value)
                return -1;
            else return 0;
        }

        public static int operator >(SimpleLongNumbers a, SimpleLongNumbers b)
        {
            if (a.Value > b.Value)
                return 1;
            else if (a.Value < b.Value)
                return -1;
            else return 0;
        }
    }

    class VeryLongNumbers
    {
        public string Value;

        public VeryLongNumbers(string value) { Value = value; }

        public static VeryLongNumbers operator +(VeryLongNumbers x, VeryLongNumbers y)
        {
            string newNumber = "";
            int xEnd = x.Value.Length - 1;
            int yEnd = y.Value.Length - 1;
            int rest = 0;
            for (int i = 0; i < x.Value.Length; i++)
            {
                if (yEnd >= 0)
                {
                    int sum = Convert.ToInt32(x.Value[xEnd].ToString()) + Convert.ToInt32(y.Value[yEnd].ToString()) + rest;
                    rest = 0;
                    if (sum <= 9)
                    {
                        newNumber += sum;
                    }
                    else if (sum >= 10)
                    {
                        rest++;
                        newNumber += sum - 10;
                    }
                    xEnd--;
                    yEnd--;
                }
                else
                {
                    int sum = Convert.ToInt32(x.Value[xEnd].ToString()) + rest;
                    rest = 0;
                    newNumber += sum;
                }
                if (xEnd == yEnd && rest == 1)
                {
                    newNumber += rest;
                    break;
                }
            }
            char[] arr = newNumber.ToCharArray();
            Array.Reverse(arr);
            return new VeryLongNumbers(arr.ToString());
        }

        public static VeryLongNumbers operator -(VeryLongNumbers x, VeryLongNumbers y)
        {
            string newNumber = "";
            int xEnd = x.Value.Length - 1;
            int yEnd = y.Value.Length - 1;
            int rest = 0;
            for (int i = 0; i < x.Value.Length; i++)
            {
                if (yEnd >= 0)
                {
                    int sum = Convert.ToInt32(x.Value[xEnd].ToString()) - Convert.ToInt32(y.Value[yEnd].ToString()) + rest;
                    rest = 0;
                    if (sum >= 0)
                    {
                        newNumber += sum;
                    }
                    else if (sum < 0)
                    {
                        rest++;
                        newNumber += 10 + sum;
                    }
                    xEnd--;
                    yEnd--;
                }
                else
                {
                    int sum = Convert.ToInt32(x.Value[xEnd].ToString()) - rest;
                    rest = 0;
                    if (sum < 0)
                    {
                        rest++;
                        newNumber += 10 + sum;
                        continue;
                    }
                    newNumber += sum;
                }
                if (xEnd == yEnd && rest == 1)
                {
                    newNumber += Convert.ToInt32(x.Value[0]) - rest;
                    break;
                }
            }
            char[] arr = newNumber.ToCharArray();
            Array.Reverse(arr);
            return new VeryLongNumbers(arr.ToString());
        }

        public static int operator >(VeryLongNumbers x, VeryLongNumbers y)
        {
            if (x.Value.Length > y.Value.Length)
            {
                return 1;
            }
            else if (x.Value.Length < y.Value.Length)
            {
                return -1;
            }
            else
            {
                bool aNumberIsBigger = false;
                bool bNumberIsBigger = false;
                for (int i = 0; i < x.Value.Length; i++)
                {
                    if (Convert.ToInt32(x.Value[i].ToString()) > Convert.ToInt32(x.Value[i].ToString()))
                    {
                        aNumberIsBigger = true;
                    }
                    else if (Convert.ToInt32(x.Value[i].ToString()) < Convert.ToInt32(y.Value[i].ToString()))
                    {
                        bNumberIsBigger = true;
                    }
                }
                if (aNumberIsBigger == false && bNumberIsBigger == false)
                {
                    return 0;
                }
                else if (aNumberIsBigger == true)
                {
                    return 1;
                }
                else
                {
                    return -1;
                }
            }
        }

        public static int operator <(VeryLongNumbers x, VeryLongNumbers y)
        {
            if (x.Value.Length < y.Value.Length)
            {
                return 1;
            }
            else if (x.Value.Length > y.Value.Length)
            {
                return -1;
            }
            else
            {
                bool aNumberIsBigger = false;
                bool bNumberIsBigger = false;
                for (int i = 0; i < x.Value.Length; i++)
                {
                    if (Convert.ToInt32(x.Value[i].ToString()) < Convert.ToInt32(x.Value[i].ToString()))
                    {
                        aNumberIsBigger = true;
                    }
                    else if (Convert.ToInt32(x.Value[i].ToString()) > Convert.ToInt32(y.Value[i].ToString()))
                    {
                        bNumberIsBigger = true;
                    }
                }
                if (aNumberIsBigger == false && bNumberIsBigger == false)
                {
                    return 0;
                }
                else if (aNumberIsBigger == true)
                {
                    return 1;
                }
                else
                {
                    return -1;
                }
            }
        }
    }

    class Number<T> where T : notnull, SimpleLongNumbers
    {
        public T value { get; set; }

        public Number(SimpleLongNumbers value) { this.value = (T)value; }

        public Number<T> Add(T num)
        {
            return new Number<T>(value + num);
        }

        
    }

    class Program
    {
        static void Main(string[] args)
        {
            Number<SimpleLongNumbers> a = new Number<SimpleLongNumbers>(new SimpleLongNumbers(25));
            SimpleLongNumbers b = new SimpleLongNumbers(25);
            Number<SimpleLongNumbers> c = a.Add(b);
            Console.WriteLine(c.value);
        }
    }
}
